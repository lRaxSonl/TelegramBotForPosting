from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.inline.admin_panel_keyboard import create_manage_editor_inline_keyboard
from database.requests import is_admin, is_moderator, get_all_editors, add_editor, delete_editor_by_id
from loader import bot
from states.FSM_States import EditorFSM

router = Router()

async def has_access(tg_id):
    return await is_admin(tg_id) or await is_moderator(tg_id)

@router.callback_query(lambda c: c.data=="panel_editors")
async def panel(callback: types.CallbackQuery):
    if not await has_access(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: ", reply_markup=create_manage_editor_inline_keyboard())


#–°–ø–∏—Å–æ–∫ –º–æ–Ω—Ç–∞–∂—ë—Ä–æ–≤
@router.callback_query(lambda c: c.data == "panel_editor_list")
async def editor_list(callback: types.CallbackQuery):
    if not await has_access(callback.from_user.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    editors = await get_all_editors()

    if not editors:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –º–æ–Ω—Ç–∞–∂—ë—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    text = "üìú **–°–ø–∏—Å–æ–∫ –º–æ–Ω—Ç–∞–∂—ë—Ä–æ–≤:**\n\n"
    for editor in editors:
        text += f"üé¨ {editor.name} ‚Äî {editor.link}\n"

    await callback.message.answer(text)


'''===============================–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Ç–∞–∂—ë—Ä–∞===================================='''
@router.callback_query(lambda c: c.data == "panel_editor_add")
async def editor_add(callback: types.CallbackQuery, state: FSMContext):
    if not await has_access(callback.from_user.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–æ–Ω—Ç–∞–∂—ë—Ä–∞:")
    await state.set_state(EditorFSM.name)


@router.message(StateFilter(EditorFSM.name))
async def process_editor_name(message: types.Message, state: FSMContext):
    editor_name = message.text.strip()

    if not editor_name:
        await message.answer("–ò–º—è –º–æ–Ω—Ç–∞–∂—ë—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.update_data(editor_name=editor_name)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–Ω—Ç–∞–∂—ë—Ä–∞:")
    await state.set_state(EditorFSM.link)


@router.message(StateFilter(EditorFSM.link))
async def process_editor_link(message: types.Message, state: FSMContext):
    editor_link = message.text.strip()

    #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    editor_name = data.get("editor_name")

    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    try:
        success = await add_editor(name=editor_name, link=editor_link)
        if not success:
            await message.answer(f"–û—à–∏–±–∫–∞: –º–æ–Ω—Ç–∞–∂—ë—Ä–∞ —Å –∏–º–µ–Ω–µ–º '{editor_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        await message.answer(f"–ú–æ–Ω—Ç–∞–∂—ë—Ä '{editor_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω—Ç–∞–∂—ë—Ä–∞: {e}")

    #–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()



'''===============================–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω—Ç–∞–∂—ë—Ä–∞===================================='''

@router.callback_query(lambda c: c.data == "panel_editor_del")
async def editor_delete(callback: types.CallbackQuery):
    if not await has_access(callback.from_user.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    editors = await get_all_editors()

    if not editors:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –º–æ–Ω—Ç–∞–∂—ë—Ä–æ–≤ –ø—É—Å—Ç.")
        return


    keyboard = InlineKeyboardBuilder()
    for editor in editors:
        keyboard.add(InlineKeyboardButton(text=editor.name, callback_data=f"delete_{editor.id}"))

    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    keyboard.adjust(3)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω—Ç–∞–∂—ë—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=keyboard.as_markup())


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_editor_callback(callback: types.CallbackQuery):
    editor_id = int(callback.data.split("_")[1])

    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)

        await delete_editor_by_id(editor_id)
        await callback.message.answer(f"–ú–æ–Ω—Ç–∞–∂—ë—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–Ω—Ç–∞–∂—ë—Ä–∞: {e}")