from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.requests import is_admin, get_all_moderators, add_moderator, delete_moderator_by_id
from loader import bot
from keyboards.inline.admin_panel_keyboard import create_manage_moderator_inline_keyboard
from states.FSM_States import ModeratorFSM


router = Router()

@router.callback_query(lambda c: c.data=="panel_moderators")
async def panel(callback: types.CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: ", reply_markup=create_manage_moderator_inline_keyboard())



@router.callback_query(lambda c: c.data=="panel_moderator_list")
async def moderator_list(callback: types.CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)


    moderators = await get_all_moderators()

    if not moderators:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    text = "üìú **–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:**\n\n"
    for moderator in moderators:
        text += f"üëÆ {moderator.tg_username} ‚Äî tg_id: {moderator.tg_id}\n"
    await callback.message.answer(text)



'''===============================–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞===================================='''
@router.callback_query(lambda c: c.data=="panel_moderator_add")
async def moderator_add(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(ModeratorFSM.tg_id)


@router.message(StateFilter(ModeratorFSM.tg_id))
async def process_moderator_id(message: types.Message, state: FSMContext):
    tg_id = message.text.strip()

    if not tg_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
        return

    tg_id = int(tg_id)

    #–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        user = await bot.get_chat(tg_id)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return

    #–î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await add_moderator(tg_id=tg_id)

    if success:
        await message.answer(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {user.username} c id {tg_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

    await state.clear()


'''===============================–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞===================================='''

@router.callback_query(lambda c: c.data == "panel_moderator_del")
async def moderator_delete(callback: types.CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    moderators = await get_all_moderators()

    if not moderators:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return


    keyboard = InlineKeyboardBuilder()
    for moderator in moderators:
        keyboard.add(InlineKeyboardButton(text=moderator.tg_username, callback_data=f"deleteModerator_{moderator.id}"))

    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    keyboard.adjust(3)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=keyboard.as_markup())


@router.callback_query(lambda c: c.data.startswith("deleteModerator_"))
async def delete_moderator_callback(callback: types.CallbackQuery):
    moderator_id = int(callback.data.split("_")[1])

    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)

        await delete_moderator_by_id(moderator_id)
        await callback.message.answer(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

