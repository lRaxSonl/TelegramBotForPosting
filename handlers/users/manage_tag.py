from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.inline.admin_panel_keyboard import create_manage_tag_inline_keyboard
from database.requests import is_admin, is_moderator, add_tag, get_all_tags, delete_tag_by_id
from loader import bot
from states.FSM_States import TagFSM

router = Router()

async def has_access(tg_id):
    return await is_admin(tg_id) or await is_moderator(tg_id)


@router.callback_query(lambda c: c.data=="panel_tags")
async def panel(callback: types.CallbackQuery):
    if not await has_access(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: ", reply_markup=create_manage_tag_inline_keyboard())



@router.callback_query(lambda c: c.data=="panel_tag_list")
async def tag_list(callback: types.CallbackQuery):
    if not await has_access(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)


    tags = await get_all_tags()

    if not tags:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—É—Å—Ç.")
        return

    text = "üìú **–°–ø–∏—Å–æ–∫ –∞–∫—Ç—ë—Ä–æ–≤:**\n\n"
    for tag in tags:
        text += f"üß∑ #{tag.name}\n"
    await callback.message.answer(text)


'''===============================–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞===================================='''
@router.callback_query(lambda c: c.data == "panel_tag_add")
async def tag_add(callback: CallbackQuery, state: FSMContext):
    if not await has_access(callback.from_user.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ç–µ–≥–∞
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞:")
    await state.set_state(TagFSM.name)




@router.message(StateFilter(TagFSM.name))
async def process_tag_name(message: types.Message, state: FSMContext):
    tag_name = message.text.strip()

    if not tag_name:
        await message.answer("–ò–º—è —Ç–µ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        success = await add_tag(name=tag_name)

        if not success:
            await message.answer(f"–û—à–∏–±–∫–∞: —Ç–∞–∫–æ–π —Ç–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Ç–µ–≥: {tag_name}!")
        await state.clear()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: {e}")



'''===============================–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞===================================='''

@router.callback_query(lambda c: c.data == "panel_tag_del")
async def tag_delete(callback: types.CallbackQuery):
    if not await has_access(callback.from_user.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    tags = await get_all_tags()

    if not tags:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –º–æ–Ω—Ç–∞–∂—ë—Ä–æ–≤ –ø—É—Å—Ç.")
        return


    keyboard = InlineKeyboardBuilder()
    for tag in tags:
        keyboard.add(InlineKeyboardButton(text=tag.name, callback_data=f"deleteTag_{tag.id}"))

    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    keyboard.adjust(3)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=keyboard.as_markup())


@router.callback_query(lambda c: c.data.startswith("deleteTag_"))
async def delete_tag_callback(callback: types.CallbackQuery):
    tag_id = int(callback.data.split("_")[1])

    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)

        await delete_tag_by_id(tag_id)
        await callback.message.answer(f"–¢–µ–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¢–µ–≥–∞: {e}")