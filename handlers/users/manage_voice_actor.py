from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.FSM_States import ActorFSM
from database.requests import get_all_voice_actors, add_voice_actor, delete_voice_actor_by_id
from keyboards.inline.admin_panel_keyboard import create_manage_actor_inline_keyboard
from database.requests import is_admin, is_moderator
from loader import bot

router = Router()

async def has_access(tg_id):
    return await is_admin(tg_id) or await is_moderator(tg_id)

@router.callback_query(lambda c: c.data=="panel_actors")
async def panel(callback: types.CallbackQuery):
    if not await has_access(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: ", reply_markup=create_manage_actor_inline_keyboard())



@router.callback_query(lambda c: c.data=="panel_actor_list")
async def actor_list(callback: types.CallbackQuery):
    if not await has_access(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)


    actors = await get_all_voice_actors()

    if not actors:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—ë—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    text = "üìú **–°–ø–∏—Å–æ–∫ –∞–∫—Ç—ë—Ä–æ–≤:**\n\n"
    for actor in actors:
        text += f"üé≠ {actor.name} ‚Äî {actor.link}\n"
    await callback.message.answer(text)


'''===============================–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—ë—Ä–∞===================================='''
@router.callback_query(lambda c: c.data=="panel_actor_add")
async def actor_add(callback: types.CallbackQuery, state: FSMContext):
    if not await has_access(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)


    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞:")
    await state.set_state(ActorFSM.name)


@router.message(StateFilter(ActorFSM.name))
async def process_actor_name(message: types.Message, state: FSMContext):
    actor_name = message.text.strip()

    if not actor_name:
        await message.answer("–ò–º—è –∞–∫—Ç—ë—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.update_data(actor_name=actor_name)

    #–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ç—ë—Ä–∞:")
    await state.set_state(ActorFSM.link)


@router.message(StateFilter(ActorFSM.link))
async def process_actor_link(message: types.Message, state: FSMContext):
    actor_link = message.text.strip()

    #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    actor_name = data.get("actor_name")

    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    try:
        success = await add_voice_actor(name=actor_name, link=actor_link)
        if not success:
            await message.answer(f"–û—à–∏–±–∫–∞: –∞–∫—Ç—ë—Ä —Å –∏–º–µ–Ω–µ–º '{actor_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        await message.answer(f"–ê–∫—Ç—ë—Ä–∞ '{actor_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç—ë—Ä–∞: {e}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()





'''===============================–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç—ë—Ä–∞===================================='''

@router.callback_query(lambda c: c.data == "panel_actor_del")
async def actor_delete(callback: types.CallbackQuery):
    if not await has_access(callback.message.chat.id):
        await callback.message.answer(f"{callback.from_user.username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    actors = await get_all_voice_actors()

    #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—ë—Ä—ã
    if not actors:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—ë—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—ë—Ä–∞–º–∏
    keyboard = InlineKeyboardBuilder()
    for actor in actors:
        keyboard.add(InlineKeyboardButton(text=actor.name, callback_data=f"delete_actor:{actor.id}"))

    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    keyboard.adjust(3)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—ë—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard.as_markup())


@router.callback_query(lambda c: c.data.startswith("delete_actor:"))
async def confirm_delete_actor(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç—ë—Ä–∞."""
    actor_id = callback.data.split(":")[1]

    try:
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç—ë—Ä–∞ –∏–∑ –±–∞–∑—ã
        await delete_voice_actor_by_id(actor_id)

        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.message.answer("–ê–∫—Ç—ë—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç—ë—Ä–∞: {e}")




